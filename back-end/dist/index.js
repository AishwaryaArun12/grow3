"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var dbConfig_1 = __importDefault(require("./config/dbConfig"));
var passportRoutes_1 = __importDefault(require("./infrastructure/routes/passportRoutes"));
var authRoutes_1 = __importDefault(require("./infrastructure/routes/authRoutes"));
var serverConfig_1 = __importDefault(require("./config/serverConfig"));
var passportConfig_1 = __importDefault(require("./config/passportConfig"));
var adminRoutes_1 = __importDefault(require("./infrastructure/routes/adminRoutes"));
var userRoutes_1 = __importDefault(require("./infrastructure/routes/userRoutes"));
var http_1 = __importDefault(require("http"));
var postRoutes_1 = __importDefault(require("./infrastructure/routes/postRoutes"));
var subscriptionRoutes_1 = __importDefault(require("./infrastructure/routes/subscriptionRoutes"));
var chatRoutes_1 = __importDefault(require("./infrastructure/routes/chatRoutes"));
var jwtAuth_1 = require("./infrastructure/middlewares/jwtAuth");
var admin_1 = require("./infrastructure/middlewares/admin");
var socket_1 = __importDefault(require("./config/socket"));
var eventRoutes_1 = __importDefault(require("./infrastructure/routes/eventRoutes"));
var userBlock_1 = require("./infrastructure/middlewares/userBlock");
var port = parseInt(process.env.PORT);
(0, dbConfig_1.default)();
var app = (0, serverConfig_1.default)();
app.use(passportConfig_1.default.initialize());
app.use(passportConfig_1.default.session());
app.use('/', authRoutes_1.default);
app.use('/auth', passportRoutes_1.default);
app.use('/admin', admin_1.adminJwtAuth, adminRoutes_1.default);
app.use('/', jwtAuth_1.jwtAuth, userBlock_1.userBlock, userRoutes_1.default);
app.use('/post', jwtAuth_1.jwtAuth, postRoutes_1.default);
app.use('/subscription', subscriptionRoutes_1.default);
app.use('/chat', jwtAuth_1.jwtAuth, chatRoutes_1.default);
app.use('/event', jwtAuth_1.jwtAuth, eventRoutes_1.default);
var server = new http_1.default.Server(app);
var io = (0, socket_1.default)(server);
server.listen(port, function () {
    console.log("server running on the port ".concat(port));
});
//# sourceMappingURL=index.js.map